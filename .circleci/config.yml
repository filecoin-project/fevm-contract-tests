version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.2
  docker: circleci/docker@2.1.4

executors:
  golang:
    docker:
      # Must match GO_VERSION_MIN in project root
      - image: cimg/go:1.18.8
    resource_class: 2xlarge
  ubuntu:
    docker:
      - image: ubuntu:20.04

commands:
  prepare:
    parameters:
      linux:
        default: true
        description: is a linux build environment?
        type: boolean
      darwin:
        default: false
        description: is a darwin build environment?
        type: boolean
      darwin-architecture:
        default: "amd64"
        description: which darwin architecture is being used?
        type: string
    steps:
      - checkout
      - git_fetch_all_tags
      - install_node
      - generate_random_wallet
      - when:
          condition: <<parameters.linux>>
          steps:
            - run:
                name: Check Go Version
                command: |
                  v=`go version | { read _ _ v _; echo ${v#go}; }`
                  if [[ $v != `cat GO_VERSION_MIN` ]]; then
                    echo "GO_VERSION_MIN file does not match the go version being used."
                    echo "Please update image to cimg/go:`cat GO_VERSION_MIN` or update GO_VERSION_MIN to $v."
                    exit 1
                  fi
            - run: sudo apt-get update
            - run: sudo apt-get install ocl-icd-opencl-dev libhwloc-dev
            - run: sudo apt-get install python-is-python3
      - when:
          condition: <<parameters.darwin>>
          steps:
            - run:
                name: Install Go
                command: |
                  curl https://dl.google.com/go/go`cat GO_VERSION_MIN`.darwin-<<parameters.darwin-architecture>>.pkg -o /tmp/go.pkg && \
                  sudo installer -pkg /tmp/go.pkg -target /
            - run:
                name: Export Go
                command: |
                  echo 'export GOPATH="${HOME}/go"' >> $BASH_ENV
            - run: go version
            - run:
                name: Install dependencies with Homebrew
                command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pkg-config coreutils jq hwloc
            - run:
                name: Install Rust
                command: |
                  curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: git submodule sync
      - run: git submodule update --init
  download-params:
    steps:
      - restore_cache:
          name: Restore parameters cache
          keys:
            - 'v26-2k-lotus-params'
          paths:
            - /var/tmp/filecoin-proof-parameters/
      - run:  ./lotus fetch-params 2048
      - save_cache:
          name: Save parameters cache
          key: 'v26-2k-lotus-params'
          paths:
            - /var/tmp/filecoin-proof-parameters/
  git_fetch_all_tags:
    steps:
      - run:
          name: fetch all tags
          command: |
            git fetch --all
  install_node:
    steps:
      - run: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
      - run: export NVM_DIR="$HOME/.nvm"
      - run: echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
      - run: echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
      - run: nvm install v14
      - run: nvm use v14
      - run: nvm alias default v14
      - run: npm install --global yarn
  generate_random_wallet:
    steps:
      - run: echo -n DEPLOYER_PRIVATE_KEY=0x > .env
      - run: openssl rand -hex 32 >> .env
      - run: echo -n USER_1_PRIVATE_KEY=0x >> .env
      - run: openssl rand -hex 32 >> .env

jobs:
  ethersjs_and_web3js:
    description: |
      Run ethers.js and web3.js integration tests
    parameters: &test-params
      executor:
        type: executor
        default: golang
      go-test-flags:
        type: string
        default: "-timeout 30m"
        description: Flags passed to go test.
      target:
        type: string
        default: "./..."
        description: Import paths of packages to be tested.
    executor: << parameters.executor >>
    steps:
      - prepare
      - run:
          command: mkdir -p gasreport
      - run:
          command: make -C ./node node
          no_output_timeout: 30m
      - run:
          command: ./node/bin/node
          background: true
      - run:
          command: npm install
      - run:
          command: npx hardhat --network itest test
      - store_artifacts:
          path: gasreport
  uniswap:
    description: |
      Run uniswap tests
    parameters: &test-params
      executor:
        type: executor
        default: golang
      go-test-flags:
        type: string
        default: "-timeout 30m"
        description: Flags passed to go test.
      target:
        type: string
        default: "./..."
        description: Import paths of packages to be tested.
    executor: << parameters.executor >>
    steps:
      - prepare
      - run:
          command: make -C ./node node
          no_output_timeout: 30m
      - run:
          command: ./node/bin/node
          background: true
      - run:
          command: npm install
      - run:
          command: cp .env ./extern/fevm-uniswap-v3-core/
      - run:
          command: cd ./extern/fevm-uniswap-v3-core/ && yarn
      - run:
          command: cd ./extern/fevm-uniswap-v3-core/ && npx hardhat --network itest test || true
  fevm-hardhat-kit:
    description: |
      Run fevm-hardhat-kit deployment
    parameters: &test-params
      executor:
        type: executor
        default: golang
      go-test-flags:
        type: string
        default: "-timeout 30m"
        description: Flags passed to go test.
      target:
        type: string
        default: "./..."
        description: Import paths of packages to be tested.
    executor: << parameters.executor >>
    steps:
      - prepare
      - run:
          command: make -C ./node node
          no_output_timeout: 30m
      - run:
          command: ./node/bin/node
          background: true
      - run:
          command: npm install
      - run:
          command: cp .env ./extern/fevm-hardhat-kit/
      - run:
          command: cd ./extern/fevm-hardhat-kit/ && grep -o "PRIVATE_KEY.*" ./.env > .tmp && cat .tmp >> .env
      - run:
          command: cd ./extern/fevm-hardhat-kit/ && yarn
      - run:
          command: cd ./extern/fevm-hardhat-kit/ && npx hardhat --network itest deploy
  openzeppelin:
    description: |
      Run openzeppelin tests
    parameters: &test-params
      executor:
        type: executor
        default: golang
      go-test-flags:
        type: string
        default: "-timeout 30m"
        description: Flags passed to go test.
      target:
        type: string
        default: "./..."
        description: Import paths of packages to be tested.
    executor: << parameters.executor >>
    steps:
      - prepare
      - run:
          command: make -C ./node node
          no_output_timeout: 30m
      - run:
          command: ./node/bin/node
          background: true
      - run:
          command: npm install
      - run:
          command: cp .env ./extern/openzeppelin-contracts/
      - run:
          command: cd ./extern/openzeppelin-contracts/ && npm install
      - run:
          # remove the line of checking the revert reason
          command: cd ./extern/openzeppelin-contracts/ && sed -i '/Wrong kind of exception received/d' node_modules/@openzeppelin/test-helpers/src/expectRevert.js
      - run:
          command: cd ./extern/openzeppelin-contracts/ && npx hardhat --network itest test

workflows:
  version: 2.1
  ci:
    jobs:
      - ethersjs_and_web3js
      - uniswap
      - openzeppelin
      - fevm-hardhat-kit

  nightly:
    triggers:
      - schedule:
          cron: "0 0,8,16 * * *"
          filters:
            branches:
              only:
                - main
                - ntwk/hyperspace
    jobs:
      - ethersjs_and_web3js
      - fevm-hardhat-kit
